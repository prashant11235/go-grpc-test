// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: tix_mgr.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TixMgrClient is the client API for TixMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TixMgrClient interface {
	PurchaseTicket(ctx context.Context, in *PurchaseRequest, opts ...grpc.CallOption) (*Receipt, error)
	GetReceiptDetails(ctx context.Context, in *User, opts ...grpc.CallOption) (*Receipt, error)
	GetSectionDetails(ctx context.Context, in *Section, opts ...grpc.CallOption) (*SectionDetails, error)
	RemoveUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*OperationResult, error)
	ModifyUserSeat(ctx context.Context, in *ModifyUserSeatRequest, opts ...grpc.CallOption) (*Receipt, error)
}

type tixMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewTixMgrClient(cc grpc.ClientConnInterface) TixMgrClient {
	return &tixMgrClient{cc}
}

func (c *tixMgrClient) PurchaseTicket(ctx context.Context, in *PurchaseRequest, opts ...grpc.CallOption) (*Receipt, error) {
	out := new(Receipt)
	err := c.cc.Invoke(ctx, "/pb.TixMgr/PurchaseTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tixMgrClient) GetReceiptDetails(ctx context.Context, in *User, opts ...grpc.CallOption) (*Receipt, error) {
	out := new(Receipt)
	err := c.cc.Invoke(ctx, "/pb.TixMgr/GetReceiptDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tixMgrClient) GetSectionDetails(ctx context.Context, in *Section, opts ...grpc.CallOption) (*SectionDetails, error) {
	out := new(SectionDetails)
	err := c.cc.Invoke(ctx, "/pb.TixMgr/GetSectionDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tixMgrClient) RemoveUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*OperationResult, error) {
	out := new(OperationResult)
	err := c.cc.Invoke(ctx, "/pb.TixMgr/RemoveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tixMgrClient) ModifyUserSeat(ctx context.Context, in *ModifyUserSeatRequest, opts ...grpc.CallOption) (*Receipt, error) {
	out := new(Receipt)
	err := c.cc.Invoke(ctx, "/pb.TixMgr/ModifyUserSeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TixMgrServer is the server API for TixMgr service.
// All implementations must embed UnimplementedTixMgrServer
// for forward compatibility
type TixMgrServer interface {
	PurchaseTicket(context.Context, *PurchaseRequest) (*Receipt, error)
	GetReceiptDetails(context.Context, *User) (*Receipt, error)
	GetSectionDetails(context.Context, *Section) (*SectionDetails, error)
	RemoveUser(context.Context, *User) (*OperationResult, error)
	ModifyUserSeat(context.Context, *ModifyUserSeatRequest) (*Receipt, error)
	mustEmbedUnimplementedTixMgrServer()
}

// UnimplementedTixMgrServer must be embedded to have forward compatible implementations.
type UnimplementedTixMgrServer struct {
}

func (UnimplementedTixMgrServer) PurchaseTicket(context.Context, *PurchaseRequest) (*Receipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseTicket not implemented")
}
func (UnimplementedTixMgrServer) GetReceiptDetails(context.Context, *User) (*Receipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceiptDetails not implemented")
}
func (UnimplementedTixMgrServer) GetSectionDetails(context.Context, *Section) (*SectionDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSectionDetails not implemented")
}
func (UnimplementedTixMgrServer) RemoveUser(context.Context, *User) (*OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (UnimplementedTixMgrServer) ModifyUserSeat(context.Context, *ModifyUserSeatRequest) (*Receipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyUserSeat not implemented")
}
func (UnimplementedTixMgrServer) mustEmbedUnimplementedTixMgrServer() {}

// UnsafeTixMgrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TixMgrServer will
// result in compilation errors.
type UnsafeTixMgrServer interface {
	mustEmbedUnimplementedTixMgrServer()
}

func RegisterTixMgrServer(s grpc.ServiceRegistrar, srv TixMgrServer) {
	s.RegisterService(&TixMgr_ServiceDesc, srv)
}

func _TixMgr_PurchaseTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TixMgrServer).PurchaseTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TixMgr/PurchaseTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TixMgrServer).PurchaseTicket(ctx, req.(*PurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TixMgr_GetReceiptDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TixMgrServer).GetReceiptDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TixMgr/GetReceiptDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TixMgrServer).GetReceiptDetails(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _TixMgr_GetSectionDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Section)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TixMgrServer).GetSectionDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TixMgr/GetSectionDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TixMgrServer).GetSectionDetails(ctx, req.(*Section))
	}
	return interceptor(ctx, in, info, handler)
}

func _TixMgr_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TixMgrServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TixMgr/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TixMgrServer).RemoveUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _TixMgr_ModifyUserSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyUserSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TixMgrServer).ModifyUserSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TixMgr/ModifyUserSeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TixMgrServer).ModifyUserSeat(ctx, req.(*ModifyUserSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TixMgr_ServiceDesc is the grpc.ServiceDesc for TixMgr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TixMgr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TixMgr",
	HandlerType: (*TixMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PurchaseTicket",
			Handler:    _TixMgr_PurchaseTicket_Handler,
		},
		{
			MethodName: "GetReceiptDetails",
			Handler:    _TixMgr_GetReceiptDetails_Handler,
		},
		{
			MethodName: "GetSectionDetails",
			Handler:    _TixMgr_GetSectionDetails_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _TixMgr_RemoveUser_Handler,
		},
		{
			MethodName: "ModifyUserSeat",
			Handler:    _TixMgr_ModifyUserSeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tix_mgr.proto",
}
